// Animate
// Example for $value: ss-spin 2s infinite linear
@mixin animate($value) {
	-webkit-animation: $value;
	-moz-animation: $value;
	-ms-animation: $value;
	-o-animation: $value;
	animation: $value;
}

// Animate - Spin
// Example: use when animating icons with the animate mixin
@mixin animate-spin {
	@keyframes ss-spin {
		0% {
			@include transform(rotate(0deg));
		}
		to {
			@include transform(rotate(1turn));
		}
	}
}

// Animate - Loading
@mixin animate-loading {
	@keyframes loading {
		from {
			left: -200px;
			width: 30%;
		}
		50% {
			width: 30%;
		}
		70% {
			width: 70%;
		}
		80% {
			left: 50%;
		}
		95% {
			left: 120%;
		}
		to {
			left: 100%;
		}
	}
}

// Border radius with browser prefixes
@mixin border-radius($size) {
	-webkit-border-radius: $size;
	-moz-border-radius: $size;
	-ms-border-radius: $size;
	-o-border-radius: $size;
	border-radius: $size;
}

// Clearfix
@mixin clearfix($selector) {
	#{$selector}:before, #{$selector}:after {
		content: '';
		display: table;
	}
	#{$selector}:after {
		clear: both;
		zoom: 1;
	}
}

// Set text overflow with ellipsis
@mixin ellipsis {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// PX to EM/REM conversion
// From https://css-tricks.com/snippets/sass/px-to-em-functions
@function em($pixels, $unit: em, $context: 16px) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	$multiplier: 1em;
	@if ($unit == 'rem') {
		$multiplier: 1rem;
	}

	@return calc($pixels / $context) * $multiplier;
}

// Set flex property
// $value: grow shrink basis
@mixin flex($value) {
	// grow example    : 1 0 auto
	// base example    : 1 1 0%
	// full example    : 1 1 100%
	// max example     : 0 0 auto
	// adapt example   : 1 1 auto
	// default example : 0 1 auto
	-webkit-box-flex: nth($value, 1);
	-webkit-flex: $value;
	-ms-flex: $value;
	flex: $value;
}

// Flex flow (for overrides)
@mixin flex-direction($direction) {
	-webkit-flex-direction: $direction;
	-ms-flex-direction: $direction;
	flex-direction: $direction;	
}

// Flex wrap (for overrides)
@mixin flex-wrap($wrap) {
	-webkit-box-flex-wrap: $wrap;
	-webkit-flex-wrap: $wrap;
	-ms-flex-wrap: $wrap;
	flex-wrap: $wrap;	
}

// Flex layout
// $flow: row/column wrap/nowrap
// $type: inline or leave blank
@mixin flex-layout($flow, $type: '') {
	$new-type: '';
	@if $type != '' {
		$new-type: $type + '-';
	}
	display: -webkit-#{$new-type}box;
	display: -webkit-#{$new-type}flex;
	display: -ms-#{$new-type}flexbox;
	display: #{$new-type}flex;
	-webkit-flex-flow: $flow;
	-ms-flex-flow: $flow;
	flex-flow: $flow;
}

@mixin flex-parent($property, $value) {
	$value02: $value;
	@if $value == 'flex-start' {
		$value02: start;
	} @else if $value == 'flex-end' {
		$value02: end;
	} @else if $value == 'space-between' {
		$value02: justify;
	} @else if $value == 'space-around' {
		$value02: distribute;
	}

	@if $property == 'justify-content' {
		-webkit-box-pack: $value02;
		-webkit-justify-content: $value;
		-ms-flex-pack: $value02;
		justify-content: $value;
	} @else if $property == 'align-items' {
		-webkit-box-align: $value02;
		-webkit-align-items: $value;
		-ms-flex-align: $value02;
		-ms-grid-row-align: $value;
		align-items: $value;
	} @else if $property == 'align-content' {
		-webkit-align-content: $value;
		-ms-flex-line-pack: $value02;
		align-content: $value;
	}
}

@mixin flex-child($property, $value) {
	$value02: $value;
	@if $value == 'flex-start' {
		$value02: start;
	} @else if $value == 'flex-end' {
		$value02: end;
	}

	@if $property == 'order' {
		-webkit-box-ordinal-group: $value + 1;
		-webkit-order: $value;
		-ms-flex-order: $value;
		order: $value;
	} @else if $property == 'align-self' {
		-webkit-align-self: $value;
		-ms-flex-item-align: $value02;
		align-self: $value;
	}
}

// For setting bottom padding as height
@mixin fluid-sizing($bottom: '') {
	@if $bottom != '' {
		height: 0;
		padding-bottom: $bottom;
		overflow: hidden;
	}
}

// Basic linear gradient
@mixin gradient($c1, $c2, $direction1, $direction2) {
	background-color: $c1;
	background-image: -webkit-linear-gradient($direction2, $c1, $c2);
	background-image: -moz-linear-gradient($direction2, $c1, $c2);
	background-image: -o-linear-gradient($direction2, $c1, $c2);
	background-image: linear-gradient($direction1, $c1, $c2);
}

// Gradient - three stripes
@mixin gradient-three($fb, $c1, $c2, $c3) {
	background-color: $fb;
	background-image: -webkit-linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
	background-image: -moz-linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
	background-image: -o-linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
	background-image: linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
}

// Gradient - four stripes
@mixin gradient-four($fb, $c1, $c2, $c3, $c4) {
	background-color: $fb;
	background-image: -webkit-linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
	background-image: -moz-linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
	background-image: -o-linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
	background-image: linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
}

// Gradient - five stripes
@mixin gradient-five($fb, $c1, $c2, $c3, $c4, $c5) {
	background-color: $fb;
	background-image: -webkit-linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
	background-image: -moz-linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
	background-image: -o-linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
	background-image: linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
}

// Inline block with vertical alignment
@mixin inline-block($vertical-align) {
	display: inline-block;
	zoom: 1;
	*display: inline;
	vertical-align: $vertical-align;
}

// Image base properties
@mixin image-base {
	max-width: 100%;
	max-height: 100%;
	@include sizing(auto, auto);
	border: 0;
	margin: auto;
	display: block;
}

// Image centered position properties
@mixin image-centered {
	@include position($type: absolute, $top: 0, $bottom: 0, $right: 0, $left: 0);
}

// Placeholder
// Examples: @include placeholder {}, :focus{@include placeholder {}}, or input {@include placeholder {}}
@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&:-moz-placeholder           {@content}
	&::-moz-placeholder          {@content}
	&:-ms-input-placeholder      {@content}
}

// Mixin for positioning
@mixin position($type: '', $top: '', $bottom: '', $left: '', $right: '', $z: '') {
	@if ($type != '') {
		position: $type;
	}
	@if ($top != '') {
		top: $top;
	}
	@if ($bottom != '') {
		bottom: $bottom;
	}
	@if ($left != '') {
		left: $left;
	}
	@if ($right != '') {
		right: $right;
	}
	@if ($z != '') {
		z-index: $z;
	}
}

// Responsive px breakpoint, pass in a pixel value
@mixin respond($breakpoint) {
	@if index('px' 'cm' 'mm' 'in' 'pt' 'pc' 'dpi' 'dpcm' 'dppx' 'em' 'ex' 'rem' '%' 'vw' 'vh' 'vmin' 'vmax', unit($breakpoint)) == null {
		$breakpoint: $breakpoint + 'px';
	}
	@media only screen and (max-width: $breakpoint) {
		@content;
	}
}

// Responsive px breakpoint, pass in a pixel value
@mixin respond-min($breakpoint) {
	@if index('px' 'cm' 'mm' 'in' 'pt' 'pc' 'dpi' 'dpcm' 'dppx' 'em' 'ex' 'rem' '%' 'vw' 'vh' 'vmin' 'vmax', unit($breakpoint)) == null {
		$breakpoint: $breakpoint + 'px';
	}
	@media only screen and (min-width: $breakpoint) {
		@content;
	}
}

// Scrollbar
@mixin scrollbar($selector, $width, $s-color-01: '', $s-color-02: '') {
	#{$selector}::-webkit-scrollbar {
		width: $width;
	}
	@if $s-color-01 != '' {
		#{$selector}::-webkit-scrollbar-track {
			background: $s-color-01;
		}
	}
	@if $s-color-02 != '' {
		#{$selector}::-webkit-scrollbar-thumb {
			background: $s-color-02;
		}
	}
}

// Quick width and height sizing
@mixin sizing($width, $height) {
	width: $width;
	height: $height;
}

// screen reader only (hides elements)
@mixin sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
}

// For hiding / showing content
@mixin toggle-content($state, $transition: '') {
	@if $state == hide {
		opacity: 0;
		visibility: hidden;
	}
	@if $state == show {
		visibility: visible;
		opacity: 1;
	}
	@if ($transition == true) {
		@include transition(opacity 0.5s ease);
	}
}

// Transform
@mixin transform($value) {
	-webkit-transform: $value;
	-moz-transform: $value;
	-ms-transform: $value;
	-o-transform: $value;
	transform: $value;
}

// Transition
@mixin transition($value) {
	-webkit-transition: $value;
	-moz-transition: $value;
	-ms-transition: $value;
	-o-transition: $value;
	transition: $value;
}

// Unicode mixin
// Mostly for making sure icons output correctly
// https://github.com/sass/sass/issues/1395#issuecomment-65548751
@function unicode($str) {
	@return unquote("\'") + $str + unquote("\'");
}
